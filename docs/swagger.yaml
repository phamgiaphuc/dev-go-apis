basePath: /api
definitions:
  models.Account:
    properties:
      account_id:
        type: string
      created_at:
        type: string
      id:
        type: string
      provider:
        $ref: '#/definitions/models.Provider'
      updated_at:
        type: string
    type: object
  models.CreatePermissionGroupRequest:
    properties:
      description:
        type: string
      name:
        type: string
    required:
    - name
    type: object
  models.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  models.LoginResponse:
    properties:
      access_token:
        type: string
      user:
        $ref: '#/definitions/models.User'
    type: object
  models.Provider:
    enum:
    - credential
    - google
    - github
    type: string
    x-enum-varnames:
    - ProviderCredential
    - ProviderGoogle
    - ProviderGithub
  models.RegisterRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  models.Response:
    properties:
      data: {}
      message:
        type: string
    type: object
  models.UpdatePermissionGroupRequest:
    properties:
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      permission_ids:
        items:
          type: integer
        type: array
    required:
    - id
    - name
    type: object
  models.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      email_verified:
        type: boolean
      id:
        type: string
      image:
        type: string
      is_banned:
        type: boolean
      name:
        type: string
      role:
        type: string
      role_id:
        type: integer
      updated_at:
        type: string
    type: object
  models.UserResponse:
    properties:
      user:
        $ref: '#/definitions/models.User'
    type: object
  models.UserWithAccounts:
    properties:
      accounts:
        items:
          $ref: '#/definitions/models.Account'
        type: array
      created_at:
        type: string
      email:
        type: string
      email_verified:
        type: boolean
      id:
        type: string
      image:
        type: string
      is_banned:
        type: boolean
      name:
        type: string
      role:
        type: string
      role_id:
        type: integer
      updated_at:
        type: string
    type: object
host: localhost:8000
info:
  contact: {}
  title: Dev Go APIs
  version: v1.0.0
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      parameters:
      - description: Login request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginResponse'
      summary: Login a user
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      parameters:
      - description: Register request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
      summary: Register a new user
      tags:
      - Auth
  /permissions:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
      summary: Get list of permissions by group
      tags:
      - Permission
  /permissions/group:
    post:
      consumes:
      - application/json
      parameters:
      - description: Create a permission group
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.CreatePermissionGroupRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
      summary: Create a new permission group
      tags:
      - Permission
    put:
      consumes:
      - application/json
      parameters:
      - description: Update a permission group
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.UpdatePermissionGroupRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
      summary: Update an existing permission group
      tags:
      - Permission
  /roles:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
      summary: Get list of roles
      tags:
      - Role
  /users/{id}:
    get:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserWithAccounts'
      summary: Get user by ID
      tags:
      - User
  /users/me:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      security:
      - Bearer: []
      summary: Get user info from token
      tags:
      - User
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
