basePath: /api
definitions:
  models.APIResponse:
    properties:
      data: {}
      message:
        type: string
      stack:
        type: string
      success:
        type: boolean
    type: object
  models.Account:
    properties:
      account_id:
        type: string
      created_at:
        type: string
      id:
        type: string
      provider:
        $ref: '#/definitions/models.Provider'
      updated_at:
        type: string
    type: object
  models.CreateRoleRequest:
    properties:
      description:
        type: string
      name:
        type: string
    required:
    - name
    type: object
  models.DeleteRolePermissionsRequest:
    properties:
      role_ids:
        items:
          type: integer
        type: array
    required:
    - role_ids
    type: object
  models.GetMeResponse:
    properties:
      session_id:
        type: string
      user:
        $ref: '#/definitions/models.User'
    type: object
  models.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.LoginResponse:
    properties:
      access_token:
        type: string
      user:
        $ref: '#/definitions/models.User'
    type: object
  models.Provider:
    enum:
    - credential
    - google
    - github
    type: string
    x-enum-varnames:
    - ProviderCredential
    - ProviderGoogle
    - ProviderGithub
  models.RegisterRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    required:
    - email
    - name
    - password
    type: object
  models.RegisterResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      email_verified:
        type: boolean
      id:
        type: string
      image:
        type: string
      is_banned:
        type: boolean
      name:
        type: string
      role:
        type: string
      role_id:
        type: integer
      updated_at:
        type: string
    type: object
  models.Role:
    properties:
      description:
        type: string
      id:
        type: integer
      name:
        type: string
    required:
    - id
    type: object
  models.RolePermissions:
    properties:
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      permission_ids:
        items:
          type: integer
        type: array
    required:
    - id
    type: object
  models.UpdateRolePermissionsRequest:
    properties:
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      permission_ids:
        items:
          type: integer
        type: array
    required:
    - id
    type: object
  models.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      email_verified:
        type: boolean
      id:
        type: string
      image:
        type: string
      is_banned:
        type: boolean
      name:
        type: string
      role:
        type: string
      role_id:
        type: integer
      updated_at:
        type: string
    type: object
  models.UserWithAccounts:
    properties:
      accounts:
        items:
          $ref: '#/definitions/models.Account'
        type: array
      created_at:
        type: string
      email:
        type: string
      email_verified:
        type: boolean
      id:
        type: string
      image:
        type: string
      is_banned:
        type: boolean
      name:
        type: string
      role:
        type: string
      role_id:
        type: integer
      updated_at:
        type: string
    type: object
host: localhost:8000
info:
  contact: {}
  title: Dev Go APIs
  version: v1.0.0
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      parameters:
      - description: Login request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.LoginResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Login a user
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      parameters:
      - description: Register request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.RegisterResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Register a new user
      tags:
      - Auth
  /google:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses: {}
      summary: Log in with Google
      tags:
      - Auth
  /google/callback:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Google callback
      tags:
      - Auth
  /permissions:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Get list of permissions by group
      tags:
      - Permission
  /roles:
    delete:
      consumes:
      - application/json
      description: Remove roles
      parameters:
      - description: Delete roles request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.DeleteRolePermissionsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.APIResponse'
      security:
      - Bearer: []
      summary: Delete roles
      tags:
      - Role
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.RolePermissions'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.APIResponse'
      security:
      - Bearer: []
      summary: Get list of roles
      tags:
      - Role
    post:
      consumes:
      - application/json
      parameters:
      - description: Role creation request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.CreateRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Role'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.APIResponse'
      security:
      - Bearer: []
      summary: Create a new role
      tags:
      - Role
    put:
      consumes:
      - application/json
      parameters:
      - description: Role update request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.UpdateRolePermissionsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.RolePermissions'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.APIResponse'
      security:
      - Bearer: []
      summary: Update a role
      tags:
      - Role
  /roles/{id}:
    get:
      consumes:
      - application/json
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.RolePermissions'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.APIResponse'
      security:
      - Bearer: []
      summary: Get role by ID
      tags:
      - Role
  /users/{id}:
    get:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.UserWithAccounts'
              type: object
      summary: Get user by ID
      tags:
      - User
  /users/me:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.GetMeResponse'
              type: object
      security:
      - Bearer: []
      summary: Get user info from token
      tags:
      - User
securityDefinitions:
  ApiKey:
    description: Insert key to access the apis
    in: header
    name: X-ApiKey
    type: apiKey
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
